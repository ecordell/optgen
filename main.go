package main

import (
	"errors"
	"flag"
	"fmt"
	"go/ast"
	"go/importer"
	"go/parser"
	"go/token"
	"go/types"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

type WriterProvider func() io.Writer

// TODO: struct tags to know what to generate
// TODO: recursive generation WithMetadata(WithName())
// TODO: optional flattening of recursive generation WithMetadataName()
// TODO: field prefix
// TODO: exported / unexported generation

func main() {
	cwd, err := os.Getwd()
	if err != nil {
		log.Fatal("couldn't determine current working directory")
	}

	fs := flag.NewFlagSet("optgen", flag.ContinueOnError)
	outputPathFlag := fs.String(
		"output",
		"",
		"Location where generated options will be written",
	)

	pkgNameFlag := fs.String(
		"package",
		"",
		"Name of package to use in output file",
	)

	if err := fs.Parse(os.Args[1:]); err != nil {
		log.Fatal(err.Error())
	}

	if len(fs.Args()) < 2  {
		// TODO: usage
		log.Fatal("must specify a package directory and a struct to provide options for")
	}

	dir := fs.Arg(0)
	structName := fs.Arg(1)

	if dir == "." {
		dir = cwd
	}

	dir = path.Clean(dir)

	var writer WriterProvider
	if outputPathFlag != nil {
		writer = func() io.Writer {
			w, err := os.OpenFile(*outputPathFlag, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0600)
			if err != nil {
				log.Fatalf("couldn't open %s for writing", *outputPathFlag)
			}
			return w
		}
	}

	packageName, err := func() (string, error) {
		if pkgNameFlag != nil && *pkgNameFlag != "" {
			return *pkgNameFlag, nil
		}
		fset := token.NewFileSet()
		var f map[string]*ast.Package
		f, err = parser.ParseDir(fset, path.Dir(*outputPathFlag), nil, 0)
		if err != nil {
			return "", err
		}
		for i := range f {
			for _, node := range f[i].Files {
				return node.Name.String(), nil
			}
		}
		return "", fmt.Errorf("no package name found")
	}()
	if err != nil {
		log.Fatalf("couldn't determine package for %s, consider providing explicitly", *outputPathFlag)
	}

	err = func() error {
		fset := token.NewFileSet()
		var f map[string]*ast.Package
		f, err = parser.ParseDir(fset, dir, nil, 0)
		if err != nil {
			return err
		}

		var files []*ast.File
		for i := range f {
			for j := range f[i].Files {
				files = append(files, f[i].Files[j])
			}
			for j := range f[i].Files {
				err = generate(fset, f[i].Files[j], files, dir, packageName, j, structName, *outputPathFlag, writer)
				if err != nil {
					return err
				}
			}
		}
		return nil
	}()
	if err != nil {
		log.Fatal(err)
	}
}

func generate(set *token.FileSet, current *ast.File, all []*ast.File, dirname string, pkgName string, fileName string, structName string, outpath string, writer WriterProvider) error {
	found := make([]*ast.TypeSpec, 0)
	ast.Inspect(current, func(node ast.Node) bool {
		var ts *ast.TypeSpec
		var ok bool

		if ts, ok = node.(*ast.TypeSpec); !ok {
			return true
		}

		if ts.Name == nil {
			return true
		}

		if !strings.Contains(ts.Name.Name, structName) {
			return false
		}

		found = append(found, ts)

		return false
	})

	if len(found) == 0 {
		return nil
	}


	defs := make(map[*ast.Ident]types.Object)
	infos := &types.Info{Defs: defs}
	config := types.Config{Importer: importer.ForCompiler(set, "source", nil), FakeImportC: true}
	// TODO: there should be something better than trimprefix for this
	pkg, err := config.Check(strings.TrimPrefix(dirname, "vendor/"), set, all, infos)
	if err != nil {
		return err
	}

	outdir, err := filepath.Abs(filepath.Dir(outpath))
	if err != nil {
		return err
	}

	buf := jen.NewFilePathName(outpath, pkgName)
	buf.PackageComment("Code generated by github.com/ecordell/optgen. DO NOT EDIT.")

	for _, s := range found {
		switch s.Type.(type) {
		case *ast.StructType:
			def, ok := defs[s.Name]
			if !ok {
				continue
			}
			st, ok := def.Type().Underlying().(*types.Struct)
			if !ok {
				return errors.New("type is not a struct")
			}

			receiverId := strings.ToLower(string(def.Name()[0]))
			optTypeName := fmt.Sprintf("%sOption", def.Name())

			// if output to the same package, don't qualify imports
			structRef := func(s *jen.Statement) {
				s.Id(def.Name())
			}
			structName := def.Name()
			if outdir != pkg.Path() {
				structRef = func(s *jen.Statement) {
					s.Qual(pkg.Path(), def.Name())
				}
				structName = jen.Qual(pkg.Path(), def.Name()).GoString()
			}

			// generate the Option type
			buf.Type().Id(optTypeName).Func().Params(jen.Id(receiverId).Op("*").Do(structRef))

			// generate NewXWithOptions
			newFuncName := fmt.Sprintf("New%sWithOptions", strings.Title(def.Name()))
			buf.Comment(fmt.Sprintf("%s creates a new %s with the passed in options set", newFuncName, structName))
			buf.Func().Id(newFuncName).Params(
				jen.Id("opts").Op("...").Id(optTypeName),
			).Op("*").Do(structRef).BlockFunc(func(grp *jen.Group) {
				grp.Id(receiverId).Op(":=").Op("&").Do(structRef).Block()
				grp.For(jen.Id("_").Op(",").Id("o").Op(":=").Op("range").Id("opts")).Block(
					jen.Id("o").Params(jen.Id(receiverId)),
				)

				grp.Return(jen.Id(receiverId))
			})

			// generate WithOptions
			withFuncName := fmt.Sprintf("%sWithOptions", strings.Title(def.Name()))
			buf.Comment(fmt.Sprintf("%s configures an existing %s with the passed in options set", withFuncName, structName))
			buf.Func().Id(withFuncName).Params(
				jen.Id(receiverId).Op("*").Do(structRef), jen.Id("opts").Op("...").Id(optTypeName),
			).Op("*").Do(structRef).BlockFunc(func(grp *jen.Group) {
				grp.For(jen.Id("_").Op(",").Id("o").Op(":=").Op("range").Id("opts")).Block(
					jen.Id("o").Params(jen.Id(receiverId)),
				)
				grp.Return(jen.Id(receiverId))
			})

			// generate all With* functions
			for i := 0; i < st.NumFields(); i++ {
				f := st.Field(i)
				if f.Anonymous() {
					continue
				}

				if !f.Exported() && outdir != f.Pkg().Path() {
					continue
				}

				fieldFuncName := fmt.Sprintf("With%s", strings.Title(f.Name()))
				buf.Comment(fmt.Sprintf("%s returns an option that can set %s on a %s", fieldFuncName, strings.Title(f.Name()), structName))
				buf.Func().Id(fmt.Sprintf("With%s", strings.Title(f.Name()))).Params(
					jen.Id(f.Name()).Id(f.Type().String()),
				).Id(optTypeName).BlockFunc(func(grp *jen.Group) {
					grp.Return(
						jen.Func().Params(jen.Id(receiverId).Op("*").Do(structRef)).BlockFunc(func(grp2 *jen.Group) {
							grp2.Id(receiverId).Op(".").Id(f.Name()).Op("=").Id(f.Name())
						}),
					)
				})
			}
		default:
		}
	}

	w := writer()
	if w == nil {
		optFile := strings.Replace(fileName, ".go", "_opts.go", 1)
		w, err = os.OpenFile(optFile, os.O_CREATE|os.O_RDWR, 0600)
		if err != nil {
			return err
		}
	}

	return buf.Render(w)
}
