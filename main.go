package main

import (
	"errors"
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"go/types"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/dave/jennifer/jen"
	"golang.org/x/tools/go/packages"
)

type WriterProvider func() io.Writer

// TODO: struct tags to know what to generateForFile
// TODO: recursive generation WithMetadata(WithName())
// TODO: optional flattening of recursive generation WithMetadataName()
// TODO: configurable field prefix
// TODO: exported / unexported generation
// TODO: set/with for arrays and maps

func main() {
	fs := flag.NewFlagSet("optgen", flag.ContinueOnError)
	outputPathFlag := fs.String(
		"output",
		"",
		"Location where generated options will be written",
	)
	pkgNameFlag := fs.String(
		"package",
		"",
		"Name of package to use in output file",
	)

	if err := fs.Parse(os.Args[1:]); err != nil {
		log.Fatal(err.Error())
	}

	if len(fs.Args()) < 2  {
		// TODO: usage
		log.Fatal("must specify a package directory and a struct to provide options for")
	}

	pkgName := fs.Arg(0)
	structName := fs.Arg(1)
	//
	//if pkgName == "." {
	//	pkgName = cwd
	//}

	//pkgName = path.Clean(pkgName)

	var writer WriterProvider
	if outputPathFlag != nil {
		writer = func() io.Writer {
			w, err := os.OpenFile(*outputPathFlag, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0600)
			if err != nil {
				log.Fatalf("couldn't open %s for writing", *outputPathFlag)
			}
			return w
		}
	}

	packageName, err := func() (string, error) {
		if pkgNameFlag != nil && *pkgNameFlag != "" {
			return *pkgNameFlag, nil
		}
		fset := token.NewFileSet()
		var f map[string]*ast.Package
		f, err := parser.ParseDir(fset, path.Dir(*outputPathFlag), nil, 0)
		if err != nil {
			return "", err
		}
		for i := range f {
			for _, node := range f[i].Files {
				return node.Name.String(), nil
			}
		}
		return "", fmt.Errorf("no package name found")
	}()
	if err != nil {
		log.Fatalf("couldn't determine package for %s, consider providing explicitly", *outputPathFlag)
	}

	err = func() error {
		cfg := &packages.Config{
			Mode: packages.NeedFiles | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedImports | packages.NeedSyntax,
		}
		pkgs, err := packages.Load(cfg, pkgName)
		if err != nil {
			fmt.Fprintf(os.Stderr, "load: %v\n", err)
			os.Exit(1)
		}
		if packages.PrintErrors(pkgs) > 0 {
			os.Exit(1)
		}

		for _, pkg := range pkgs {
			for _, f := range pkg.Syntax {
				structs := findStructDefs(f, pkg.TypesInfo.Defs, map[string]struct{}{structName: {}})
				if len(structs) == 0 {
					continue
				}
				err = generateForFile(structs, packageName, f.Name.Name, *outputPathFlag, writer)
				if err != nil {
					return err
				}
			}
		}

		return nil
	}()
	if err != nil {
		log.Fatal(err)
	}
}

func findStructDefs(file *ast.File, defs map[*ast.Ident]types.Object, names map[string]struct{}) []types.Object {
	found := make([]*ast.TypeSpec, 0)
	ast.Inspect(file, func(node ast.Node) bool {
		var ts *ast.TypeSpec
		var ok bool

		if ts, ok = node.(*ast.TypeSpec); !ok {
			return true
		}

		if ts.Name == nil {
			return true
		}

		if _, ok := names[ts.Name.Name]; !ok {
			return false
		}
		found = append(found, ts)

		return false
	})

	if len(found) == 0 {
		return nil
	}

	var objs = make([]types.Object, 0)
	for _, s := range found {
		switch s.Type.(type) {
		case *ast.StructType:
			def, ok := defs[s.Name]
			if !ok {
				continue
			}
			objs = append(objs, def)
		}
	}
	return objs
}

func generateForFile(objs []types.Object, pkgName string, fileName string, outpath string, writer WriterProvider) error {
	outdir, err := filepath.Abs(filepath.Dir(outpath))
	if err != nil {
		return err
	}

	buf := jen.NewFilePathName(outpath, pkgName)
	buf.PackageComment("Code generated by github.com/ecordell/optgen. DO NOT EDIT.")

	for _, def := range objs {
		st, ok := def.Type().Underlying().(*types.Struct)
		if !ok {
			return errors.New("type is not a struct")
		}

		receiverId := strings.ToLower(string(def.Name()[0]))
		optTypeName := fmt.Sprintf("%sOption", def.Name())
		targetTypeName := strings.Title(def.Name())

		structRef := []jen.Code{jen.Id(def.Name())}
		structName := def.Name()

		// if output is not to the same package, qualify imports
		if outdir != st.Field(0).Pkg().Path() {
			structRef = []jen.Code{jen.Qual(st.Field(0).Pkg().Path(), def.Name())}
			structName = jen.Qual(st.Field(0).Pkg().Path(), def.Name()).GoString()
		}

		// generateForFile the Option type
		writeOptionType(buf, optTypeName, receiverId, structRef)

		// generateForFile NewXWithOptions
		writeNewXWithOptions(buf, targetTypeName, structName, optTypeName, receiverId, structRef)

		// generateForFile WithOptions
		writeXWithOptions(buf, targetTypeName, structName, optTypeName, receiverId, structRef)

		// generateForFile all With* functions
		writeAllWithOptFuncs(buf, st, outdir, structName, optTypeName, receiverId, structRef)
	}

	w := writer()
	if w == nil {
		optFile := strings.Replace(fileName, ".go", "_opts.go", 1)
		w, err = os.OpenFile(optFile, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0600)
		if err != nil {
			return err
		}
	}

	return buf.Render(w)
}

func writeOptionType(buf *jen.File, optTypeName, receiverId string, structRef []jen.Code) {
	buf.Type().Id(optTypeName).Func().Params(jen.Id(receiverId).Op("*").Add(structRef...))
}

func writeNewXWithOptions(buf *jen.File, targetTypeName, structName, optTypeName, receiverId string, structRef []jen.Code) {
	newFuncName := fmt.Sprintf("New%sWithOptions", targetTypeName)
	buf.Comment(fmt.Sprintf("%s creates a new %s with the passed in options set", newFuncName, structName))
	buf.Func().Id(newFuncName).Params(
		jen.Id("opts").Op("...").Id(optTypeName),
	).Op("*").Add(structRef...).BlockFunc(func(grp *jen.Group) {
		grp.Id(receiverId).Op(":=").Op("&").Add(structRef...).Block()
		applyOptions(receiverId)(grp)
	})
}

func writeXWithOptions(buf *jen.File, targetTypeName, structName, optTypeName, receiverId string, structRef []jen.Code) {
	withFuncName := fmt.Sprintf("%sWithOptions", targetTypeName)
	buf.Comment(fmt.Sprintf("%s configures an existing %s with the passed in options set", withFuncName, structName))
	buf.Func().Id(withFuncName).Params(
		jen.Id(receiverId).Op("*").Add(structRef...), jen.Id("opts").Op("...").Id(optTypeName),
	).Op("*").Add(structRef...).BlockFunc(applyOptions(receiverId))
}

func applyOptions(receiverId string) func(grp *jen.Group) {
	return func(grp *jen.Group) {
		grp.For(jen.Id("_").Op(",").Id("o").Op(":=").Op("range").Id("opts")).Block(
			jen.Id("o").Params(jen.Id(receiverId)),
		)
		grp.Return(jen.Id(receiverId))
	}
}

func writeAllWithOptFuncs(buf *jen.File, st *types.Struct, outdir, structName, optTypeName, receiverId string, structRef []jen.Code) {
	for i := 0; i < st.NumFields(); i++ {
		f := st.Field(i)
		if f.Anonymous() {
			continue
		}

		// don't write options for unexported fields unless the target is the same package
		if !f.Exported() && outdir != f.Pkg().Path() {
			continue
		}

		// build a type specifier based on the field type
		typeRef := typeSpecForType(f.Type())
		fieldFuncName := fmt.Sprintf("With%s", strings.Title(f.Name()))
		buf.Comment(fmt.Sprintf("%s returns an option that can set %s on a %s", fieldFuncName, strings.Title(f.Name()), structName))
		buf.Func().Id(fieldFuncName).Params(
			jen.Id(unexport(f.Name())).Add(typeRef...),
		).Id(optTypeName).BlockFunc(func(grp *jen.Group) {
			grp.Return(
				jen.Func().Params(jen.Id(receiverId).Op("*").Add(structRef...)).BlockFunc(func(grp2 *jen.Group) {
					grp2.Id(receiverId).Op(".").Id(f.Name()).Op("=").Id(unexport(f.Name()))
				}),
			)
		})
	}
}

func typeSpecForType(t types.Type) (ref []jen.Code) {
	ref = make([]jen.Code,0)
	current := t
	for {
		switch t := current.(type) {
		case *types.Array:
			ref = append(ref, jen.Index())
			current = t.Elem()
		case *types.Slice:
			ref = append(ref, jen.Index())
			current = t.Elem()
		case *types.Pointer:
			ref = append(ref, jen.Op("*"))
			current = t.Elem()
		case *types.Named:
			// TODO: there must be a better way
			parts := strings.Split(t.String(), ".")
			suffix := parts[len(parts)-1]
			ref = append(ref, jen.Qual(strings.Join(parts[:len(parts)-1], "."), suffix))
			return
		case *types.Basic:
			ref = append(ref, jen.Id(t.Name()))
			return
		case *types.Struct:
			ref = append(ref, jen.Struct())
			return
		}
	}
	return
}

func unexport(s string) string {
	if len(s) == 0 {
		return s
	}
	r := []rune(s)
	r[0] = unicode.ToLower(r[0])
	return string(r)
}